# -*- coding: utf-8 -*-
"""Covid-19 Data Visualization.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PDGo-MwWHi64sb_QOwXIc2of-A5pgGfO
"""

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
import plotly.graph_objects as go
import plotly.figure_factory as ff
from plotly.subplots import make_subplots
import folium
from folium import plugins
import requests
from matplotlib import colors
import seaborn as sns

"""Lets get real-time data from the JHU
COVID-19 Github!!
"""

url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv'
CONFIRMED = pd.read_csv(url)

url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv'
DEATHS = pd.read_csv(url)

url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv'
RECOVERED = pd.read_csv(url)

# explore the data
print(CONFIRMED.shape)
CONFIRMED.head(10)

#Lets find the top 10 infected countries first
#Lets clean the data first and remove the insignificant columns 
df_tmp = CONFIRMED.drop(['Province/State','Lat','Long'],axis=1)
df_tmp = pd.DataFrame(df_tmp.groupby(['Country/Region'],as_index=False).sum())
df_tmp = df_tmp.sort_values(by=CONFIRMED.columns[len(CONFIRMED.columns)-1], ascending=False)
TOPTEN_countries = df_tmp[0:10]

TOPTEN_countries

#Lets get the values of X axis on the basis of which we have to plot
Xaxis = TOPTEN_countries.columns
fig = go.Figure()
temp = []

#Time to build a line plot
for i in range(0,10,1):
  y = TOPTEN_countries.iloc[i,1:].values.flatten().tolist()
  fig.add_trace(go.Scatter(x=Xaxis[1:], y=y,
                    mode='lines+markers',
                    name=TOPTEN_countries.iloc[i,0]))
  
# Lets assign a suitable title to our graph
temp.append(dict(xref='paper', yref='paper', x=0.0, y=1.05,
                              xanchor='left', yanchor='bottom',
                              text='Country by Country Confirmed Cases',
                              font=dict(family='Times New Roman',
                                        size=18,
                                        color='rgb(0, 0, 255)'),
                              showarrow=False))
fig.update_layout(annotations=temp)
fig.show()

# Lets pull the statewise data from worldometers.info
url = 'https://www.worldometers.info/coronavirus/country/us/'
header = {
  "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/50.0.2661.75 Safari/537.36",
  "X-Requested-With": "XMLHttpRequest"
}
bubble = requests.get(url, headers=header)
CONFIRMED_USA = pd.read_html(bubble.text)[1]

CONFIRMED_USA.head()

# We need only total cases for our bubble plot. Lets get rid of other columns
CONFIRMED_USA_bubble = CONFIRMED_USA.drop(['NewCases','TotalDeaths','NewDeaths','ActiveCases'],axis=1)

CONFIRMED_USA_bubble.head()

# Lets pull the geographical data on states in order to plot a map
state_info = pd.read_csv('https://raw.githubusercontent.com/jasperdebie/VisInfo/master/us-state-capitals.csv')
state_info.head()

#Lets rename to make the joining easier
CONFIRMED_USA_bubble.rename(columns={'USAState':'name'}, inplace = True)
CONFIRMED_USA_bubble.head()

#Time to join CONFIRMED_USA and state_info
COVID_USA = pd.merge(state_info, CONFIRMED_USA_bubble, on='name')
COVID_USA.head()

# Make an empty map
m = folium.Map(location=[36, -119], zoom_start=2)

#Lets build a bubble plot
for i in range(0,len(COVID_USA)):
   folium.Circle(
      location=[COVID_USA.iloc[i]['latitude'], COVID_USA.iloc[i]['longitude']],
      popup=COVID_USA.iloc[i]['name'] + ' ' + str(COVID_USA.iloc[i]['TotalCases']),
      radius=int(COVID_USA.iloc[i]['TotalCases']*4),
      color='green',
      fill=True,
      fill_color='black'
   ).add_to(m)
m

#Referred this link 'https://python-graph-gallery.com/313-bubble-map-with-folium/' PRETTY COOL!!!

#Lets get the required datasets from github
url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/archived_data/archived_time_series/time_series_19-covid-Confirmed_archived_0325.csv'
US_confirmed = pd.read_csv(url)

url = 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv'
US_death = pd.read_csv(url)

US_confirmed.head(10)

tmpdata = US_confirmed[US_confirmed['Country/Region']=='US']
print(tmpdata.shape) #247 rows for the USA
tmpdata.tail(10)

tmpdata['Confirmed Cases'] = tmpdata.iloc[:,-1:]
tmpdata.head(10)

#Lets clean our data and remove the unwanted columns
tmpdata = tmpdata.drop(['Country/Region','Lat','Long'],axis=1)
tmpdata.head(10)

tmpdata.loc["1"] = tmpdata.sum(numeric_only=True)
tmpdata.tail()

tmpdata.iloc[-1, tmpdata.columns.get_loc('Province/State')] = 'US'
tmpdata.tail()

tmpdata = tmpdata.reindex(np.roll(tmpdata.index, shift=1))

tmpdata.head()

tmpdata.shape

tmpdata.dtypes

tmpdata = tmpdata.replace([np.inf, -np.inf], np.nan)
tmpdata = tmpdata.fillna(0)

tmpdata[['3/23/20', 'Confirmed Cases']] = tmpdata[['3/23/20', 'Confirmed Cases']].astype(int)

tmpdata = tmpdata.astype(int, errors='ignore')

tmpdata.dtypes

tmpdata.shape

#Lets drop all the records with commas in it since we only need to create a colour table for states
tmpdata = tmpdata[~tmpdata['Province/State'].str.contains(",")]

tmpdata.shape

#Now that we have our dataset ready, lets build a colour table with this simple one line code
colour_table = tmpdata.style.background_gradient(cmap='Reds', axis=1)

colour_table



