# -*- coding: utf-8 -*-
"""Spot checking algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mkxd_xWzh_ipyXE6b8XD5I07Ng4qNrpm
"""

from google.colab import drive
drive.mount('/content/drive')

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
import pandas as pd
# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
link="https://drive.google.com/open?id=1uRkuyMI8G7tEtnArNwPl-JkVOtnj-uXT"
fluff, id = link.split('=')
downloaded = drive.CreateFile({'id':id})
downloaded.GetContentFile('500Cities_cleandata_ReadyForEDA.csv')
df = pd.read_csv('500Cities_cleandata_ReadyForEDA.csv')

import pandas as pd
import numpy as np
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import BaggingClassifier

#Lets read in the data
df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/Exam/500Cities_cleandata_ReadyForEDA.csv')

df.head()

df.shape

#Lets set the random seed to 123
np.random.seed(123)

#Time to shuffle our data
df = shuffle(df)

#Lets calculate mean of Population2010 first
median_pop = round(np.median(df['Population2010']),2)

print(median_pop)

#Lets recode columns now based on median value
df['Population2010'] = np.where(df['Population2010'] > median_pop, '1', '0')

df.head()

#Lets drop all the rows with NA values
df = df.dropna()

df.shape

df.head()

#Lets remove the geographical variables now
df = df.drop(['Unnamed: 0',
              'Geolocation', 'StateAbbr', 'PlaceName','PlaceFIPS' ], axis =1)

df.shape

#Lets split the data into training and validation first
y = df['Population2010']
X = df.drop(columns='Population2010')

print(X.shape, y.shape)

X.head()

y.head()

validation_size = 0.20
seed = 123
X_train, X_validation, y_train, y_validation = train_test_split(X, y, test_size=validation_size, random_state=seed)

# Spot-Check Algorithms
models = []
models.append(('GBC', GradientBoostingClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('RFC', RandomForestClassifier()))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('LR', LogisticRegression(max_iter=1000000)))
models.append(('KNN', KNeighborsClassifier()))
models.append(('NB', GaussianNB()))
models.append(('ETC', ExtraTreesClassifier()))
models.append(('BC', BaggingClassifier()))

# evaluate each model in turn
results = []
names = []
# store preds
from sklearn.model_selection import cross_val_predict
dwPreds = []
for name, model in models:
  kfold = KFold(n_splits=20, random_state=seed, shuffle=True)
  cv_results = cross_val_score(model, X_train, y_train, cv=kfold, scoring='accuracy')
  results.append(cv_results)
  names.append(name)
  msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
  print(msg)

"""On looking at the results, we can observe that Gradient Boosting Classifier is the best one."""

# Make predictions on validation dataset
model1 = GradientBoostingClassifier()
model1.fit(X_train, y_train)
predictions = model1.predict(X_validation)
print(accuracy_score(y_validation, predictions))
print(confusion_matrix(y_validation, predictions))
print(classification_report(y_validation, predictions))

# Time for some hyperparameter tuning
#Lets get some information about parameters involved in Gradient boosting
from sklearn.model_selection import GridSearchCV
GradientBoostingClassifier().get_params()

#Lets assign a list of parameter values now
param_range1 = [20,30,40]
param_range2 = [4,5,6]
param_range3 = [5,6,7]

grid_parameters = [{
    'max_leaf_nodes': param_range2,
    'max_depth': param_range3,
    'n_estimators': param_range1
 }]

grid = GridSearchCV(GradientBoostingClassifier(), param_grid = grid_parameters, cv = 20, verbose = 5, n_jobs = -1)
grid.fit(X_train, y_train)

#Lets use some interesting functions that grid search provides us to find out best parameters and score associated with it
grid.best_params_

grid.best_score_



























